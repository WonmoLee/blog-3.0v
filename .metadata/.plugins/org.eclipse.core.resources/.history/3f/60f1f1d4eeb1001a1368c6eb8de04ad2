package com.blog.tistory.repository;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import com.blog.tistory.db.DBConn;
import com.blog.tistory.model.RoleType;
import com.blog.tistory.model.Users;



public class UsersRepository {
	
	private static final String TAG = "UsersRepository : ";
	
	private static UsersRepository instance = new UsersRepository();
	private UsersRepository() {}
	public static UsersRepository getInstance() {
		return instance;
	}
	
	private Connection conn = null;
	private PreparedStatement pstmt = null;
	private ResultSet rs = null;
	
	public int findByUserName(String username) {
		final String SQL = "SELECT COUNT(*) FROM USERS WHERE USERNAME = ?";
		
		try {
				conn = DBConn.getConnection();
				pstmt = conn.prepareStatement(SQL);
				
				pstmt.setString(1, username);
				rs = pstmt.executeQuery();
				if (rs.next()) {
					return rs.getInt(1);
				}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG + "findByUserName : " + e.getMessage());
		} finally {
			DBConn.close(conn, pstmt, rs);
		}
		
		return -1;
	}
	
	public Users fineByUsernameAndPassword(String username, String password) {
		final String SQL = "SELECT ID, USERNAME, EMAIL, ADDRESS, USERPROFILE, USERROLE, CREATEDATE FROM USERS WHERE ID = ? PASSWORD = ?";
		Users user = null;
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			
			pstmt.setString(1, username);
			pstmt.setString(2, password);
			
			rs = pstmt.executeQuery();
			
			if (rs.next()) {
				user = new Users();
				
				user.setId(rs.getInt("id"));
				user.setUserName(rs.getString("username"));
				user.setEmail(rs.getString("email"));
				user.setAddress(rs.getString("address"));
				user.setUserProfile(rs.getString("userProfile"));
				user.setUserRole(RoleType.valueOf(rs.getString("userRole")));
				user.setCreateDate(rs.getTimestamp("createDate"));
			}
			return user;
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG + "findByUsernameAndPassword : " + e.getMessage());
		} finally {
			DBConn.close(conn, pstmt, rs);
		}
		
		return null;
	}
	
	public int save(Users user) {
		final String SQL = "INSERT INTO USERS(ID, USERNAME, PASSWORD, EMAIL, ADDRESS, USERROLE, CREATEDATE) VALUES(USERS_SEQ.NEXTVAL, ? ,?, ?, ?, ?, SYSDATE)";
		
		try {
			conn = DBConn.getConnection();
			pstmt = conn.prepareStatement(SQL);
			
			pstmt.setString(1, user.getUserName());
			pstmt.setString(2, user.getPassword());
			pstmt.setString(3, user.getEmail());
			pstmt.setString(4, user.getAddress());
			pstmt.setString(5, user.getUserRole().toString());
			
			pstmt.executeUpdate();
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println(TAG + "save : " + e.getMessage());
		}
		
		
		
		return -1;
	}
}
